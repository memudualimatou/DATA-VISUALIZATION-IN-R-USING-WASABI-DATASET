runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
data
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
?data.frame
?data.frame
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/r_exo3')
shiny::runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
library(GGally)
install.packages("GGally")
library(GGally)
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
data <- read.csv('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/global_data_120444_sadia2.csv')
data
data[11:12]
data
data[4:11:12]
data[4,11:12]
data[4:11:12]
data[4:11:12,0]
data[4:11:12]
data[4::11::12]
data%>%select(data,c(country,avaearge_fans))
data%>%select(data,c(country,avearge_fans))
data%>%select(data,c(country,average_fans))
select(data,c(country,average_fans))
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
library(GGally)
ggparcoord(data = iris,
columns = 1:4,
groupColumn = "Species",
order = "anyClass") +
scale_color_brewer(palette = "Set2")
library(GGally)
ggparcoord(data = iris,
columns = ["Sepal.Length","Petal.Length"],
library(GGally)
ggparcoord(data = iris,
columns = [["Sepal.Length","Petal.Length"]],
library(GGally)
ggparcoord(data = iris,
columns = .data[["Sepal.Length","Petal.Length"]],
groupColumn = "Species",
order = "anyClass") +
scale_color_brewer(palette = "Set2")
library(GGally)
ggparcoord(data = iris,
columns = data[["Sepal.Length","Petal.Length"]],
groupColumn = "Species",
order = "anyClass") +
scale_color_brewer(palette = "Set2")
library(GGally)
ggparcoord(data = iris,
columns = select(data,c(Sepal.Length,Petal.Length)),
groupColumn = "Species",
order = "anyClass") +
scale_color_brewer(palette = "Set2")
library(GGally)
ggparcoord(data = iris,
columns = select(data,c("Sepal.Length","Petal.Length")),
groupColumn = "Species",
order = "anyClass") +
scale_color_brewer(palette = "Set2")
library(GGally)
ggparcoord(data = iris,
columns = iris%>%select(data,c(Sepal.Length,Petal.Length)),
groupColumn = "Species",
order = "anyClass") +
scale_color_brewer(palette = "Set2")
library(GGally)
ggparcoord(data = iris,
columns = iris%>%select(iris,c(Sepal.Length,Petal.Length)),
groupColumn = "Species",
order = "anyClass") +
scale_color_brewer(palette = "Set2")
library(GGally)
ggparcoord(data = iris,
columns = select(iris,c(Sepal.Length,Petal.Length)),
groupColumn = "Species",
order = "anyClass") +
scale_color_brewer(palette = "Set2")
select(iris,c(Sepal.Length,Petal.Length))
colnames(select(iris,c(Sepal.Length,Petal.Length)))
library(GGally)
ggparcoord(data = iris,
columns = colnames(select(iris,c(Sepal.Length,Petal.Length))),
groupColumn = "Species",
order = "anyClass") +
scale_color_brewer(palette = "Set2")
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
runApp('C:/Users/Alimat sadia/Desktop/MSC DS &  AI/Data visualization/Work project/myApp')
artist_data1= read.csv("artists_features_sadia.csv")
artist_data1
sum(is.na(artist_data1))
colSums(is.na(artist_data1))
# No duplicated values
artist_data1<-artist_data1[!duplicated(artist_data1),]
artist_data1
library(dplyr)
# SPLITING LOCATION COLUMN INTO 3 COLUMN CORUNTRY STATE AND CITY
countries=c()
states=c()
cities=c()
for (i in seq(1,length(artist_data1$locationInfo),1)){
#print(i)
if (!is.na(artist_data1$locationInfo[i])) {
location= strsplit(artist_data1$locationInfo[i], "[,]")[[1]]
country=location[1]
state=location[2]
city=location[3]
#print(i)
artist_data1$country[i]<-country
artist_data1$states[i]<-state
artist_data1$cities[i]<-city
}
else{
artist_data1$country[i]<-NA
artist_data1$states[i]<-NA
artist_data1$cities[i]<-NA
}
}
# replacing england by united kindom for easy geographical location
artist_data1$country[artist_data1$country == 'England'] <- 'United Kingdom'
table(artist_data1$country)
# delteing locatuoninfor column
artist_data1 <- select(artist_data1, -locationInfo)
artist_data1
artist_data1 <- rename(artist_data1, "id_artist" = "id")
artist_data1 <- rename(artist_data1, "deezerFans_artist" = "deezerFans")
artist_data1
# add available country varaible
song_data1= read.csv("song_features_sadia.csv")
song_data1
colSums(is.na(song_data1))
song_data1
#extract year fro publication dat and rename column
for (i in seq(1,length(song_data1$id),1)){
#print(i)
if(!is.na(song_data1$publicationDate[i])) {
lifeSpan_end= strsplit(song_data1$publicationDate[i], "[-]")[[1]]
year_end=lifeSpan_end[1]
#print(i)
song_data1$publicationDate[i]<-year_end
}
else{
song_data1$publicationDate[i]<-NA}
}
# deleting award , lyrics and genre  columns
song_data1
colSums(is.na(song_data1))
# song per album]
song_data1 %>%
group_by(id_album) %>%
summarise(count_song = n_distinct("id"))
n_distinct(song_data1$id)
song_data1 <- rename(song_data1, "id_song" = "id")
song_data1 <- rename(song_data1, "genre_song" = "genre")
song_data1 <- rename(song_data1, "publicationDate_song" = "publicationDate")
song_data1 <- subset(song_data1, select=-availableCountries)
song_data1
album_data1= read.csv("albums_features_sadia.csv")
album_data1
colSums(is.na(album_data1))
# check for missing value in publication and replace it by year in date release
for (i in seq(1,length(album_data1$id_album),1)){
if(!is.na(album_data1$publicationDate[i])) {
year= strsplit(album_data1$publicationDate[i], "[-]")[[1]]
album_data1$publicationDate[i]<-year[1]
}
else{
album_data1$publicationDate[i]<-album_data1$publicationDate[i]
}
}
#album_data1
colSums(is.na(album_data1))
album_data1
album_data1 <- rename(album_data1, "publicationDate_album" = "publicationDate")
album_data1 <- rename(album_data1, "genre_album" = "genre")
album_data1 <- rename(album_data1, "deezerFans_album" = "deezerFans")
album_song<- merge(song_data1, album_data1, by = "id_album")
album_song
colSums(is.na(album_song))
album_song<- album_song %>%
filter(country != "") %>% filter(!is.na(country)  & !is.na(publicationDate_song) & !is.na(publicationDate_album) & !is.na(id_song))
album_song$publicationDate<- as.numeric(album_song$publicationDate_song)
album_song$publicationDate<- as.numeric(album_song$publicationDate_album)
library(dplyr)
library(countrycode)
# count number of songs per yer
album_song %>%
group_by(publicationDate_album) %>%
summarize(count_song = n_distinct(id_song))
all_data<- merge(album_song, artist_data1, by = "id_artist")
all_data
colSums(is.na(all_data))
library(countrycode)
all_data$continent <- countrycode(sourcevar = all_data[, "country"],
origin = "country.name", destination = "continent")
table(all_data$continent)
all_data$gender[is.na(all_data$gender)] <- "Unknown"
all_data<- rename(all_data,"year"="publicationDate_album")
global_data1<-all_data %>% group_by(year,gender,country,genre_album,lifeSpan.ended,continent) %>%
summarize(count_song = n_distinct(id_song),
count_album = n_distinct(id_album),
count_artist = n_distinct(id_artist),
deezer_fan=sum(deezerFans_album),
average_availableCountries = mean(count_availablecountry,trim = 1),
average_fans = mean(deezerFans_album,trim = 1))
global_data1$lat <- NA
global_data1$lon <- NA
global_data1$continent <- NA
global_data1<- rename(global_data1,"genre"="genre_album")
global_data1
global_data1<- data.frame(global_data1)
table(global_data1$genre)
rock_list<- list("Rock","Soft Rock","Rap Rock","Pop Rock","Piano Rock","Symphonic Rock","Electronic Rock",
"Progressive Rock","Indie Rock","Industrial Rock","Gothic Rock","Glam Rock","Hard Rock","Deutschrock","Experimental Rock","Folk Rock","Art Rock","J-Rock","Psychedelic Rock","Alternative Rock")
hip_hop_list<- list("Hip Hop","Trip Hop","Southern Hip Hop","Trip Hop",
"Hardcore Hip Hop","Christian Hip Hop","Australian Hip Hop")
pop_list<-list("Pop","Electropop","Synthpop","Psychedelic Pop","Power Pop","Experimental Pop","Pop Punk","Indie Pop","French Pop")
folk_list<- list("Folk","Filk")
punk_list<- list("Steampunk","Post-Punk","Punk Rock","Hardcore Punk","Horror Punk")
metal_list<-list("Black Metal","Glam Metal","Melodic Death Metal","Metalcore","Progressive Metal","Power Metal",
"Folk Metal","Death Metal","Heavy Metal","Gothic Metal","Nu Metal")
for (i in 1:nrow(global_data1)){
if(!is.na(global_data1$genre[i])){
if(global_data1$genre[i] %in% rock_list ){
global_data1$genre[i]<-"Rock"
}
else if (global_data1$genre[i] %in% hip_hop_list ){
global_data1$genre[i]<-"Hip Hop"
}
else if (global_data1$genre[i] %in% pop_list ){
global_data1$genre[i]<-"Pop"
}
else if (global_data1$genre[i] %in% metal_list ){
global_data1$genre[i]<-"Metal"
}
else if (global_data1$genre[i] %in% folk_list ){
global_data1$genre[i]<-"Folk"
}
else if (global_data1$genre[i] == "Jazz"){
global_data1$genre[i]<-"Jazz"
}
else if (global_data1$genre[i] =="Country" ){
global_data1$genre[i]<-"Country"
}
else if (global_data1$genre[i] =="R&amp;B"|global_data1$genre[i] =="Contemporary R&amp;B"){
global_data1$genre[i]<-"R&B"
}
else{
global_data1$genre[i]<-"Others"
}
}
}
table(global_data1$genre)
# Replace String with Another Stirng on a single column
table(global_data1$country)
getwd()
coord_cap <- read.csv(file = "concap.csv")
coord_cap$CapitalLatitude <- as.character(coord_cap$CapitalLatitude)
coord_cap$CapitalLongitude <- as.character(coord_cap$CapitalLongitude)
# get coordinates for each country
for (i in 1:nrow(global_data1)) {
if ((global_data1[i,3] %in% coord_cap$CountryName) == TRUE){
global_data1$lat[i] <- coord_cap[which(coord_cap$CountryName == as.character(global_data1[i,3])),3]
global_data1$lon[i] <- coord_cap[which(coord_cap$CountryName == as.character(global_data1[i,3])),4]
global_data1$continent[i] <- coord_cap[which(coord_cap$CountryName == as.character(global_data1[i,3])),6]
} else {
global_data1$lat[i] <- "Unknown"
global_data1$lon[i] <- "Unknown"
}
}
global_data1$genre[is.na(global_data1$genre)] <- "Unknown"
global_data1$country[is.na(global_data1$country)] <- "Unknown"
colSums(is.na(global_data1))
global_data1
table(global_data1$continent)
# here we can see that  Canada     Guatemala        Mexico United States are considered as central america country lets change that to north america
dd=global_data1%>% filter(continent=="Central America")%>% select(country)
table(dd)
# so
global_data1$continent[global_data1$continent == "Central America"] <- 'North America'
table(global_data1$continent)
dd=global_data1%>% filter(continent=="South America")%>% select(country)
table(dd)
write.csv(global_data1,"global_data_120444_sadia003.csv")
shiny::runApp()
library(ggalluvial)
install.packages("ggalluvial")
runApp()
artist_data1= read.csv("artists_features_sadia.csv")
artist_data1
sum(is.na(artist_data1))
colSums(is.na(artist_data1))
# No duplicated values
artist_data1<-artist_data1[!duplicated(artist_data1),]
artist_data1
library(dplyr)
# SPLITING LOCATION COLUMN INTO 3 COLUMN CORUNTRY STATE AND CITY
countries=c()
states=c()
cities=c()
for (i in seq(1,length(artist_data1$locationInfo),1)){
#print(i)
if (!is.na(artist_data1$locationInfo[i])) {
location= strsplit(artist_data1$locationInfo[i], "[,]")[[1]]
country=location[1]
state=location[2]
city=location[3]
#print(i)
artist_data1$country[i]<-country
artist_data1$states[i]<-state
artist_data1$cities[i]<-city
}
else{
artist_data1$country[i]<-NA
artist_data1$states[i]<-NA
artist_data1$cities[i]<-NA
}
}
# replacing england by united kindom for easy geographical location
artist_data1$country[artist_data1$country == 'England'] <- 'United Kingdom'
# replacing the netherlands by the  netherlands for easy geographical location
artist_data1$country[artist_data1$country == 'The Netherlands'] <- 'Netherlands'
table(artist_data1$country)
# delteing locatuoninfor column
artist_data1 <- select(artist_data1, -locationInfo)
artist_data1
artist_data1 <- rename(artist_data1, "id_artist" = "id")
artist_data1 <- rename(artist_data1, "deezerFans_artist" = "deezerFans")
artist_data1
# add available country varaible
song_data1= read.csv("song_features_sadia.csv")
song_data1
colSums(is.na(song_data1))
song_data1
#extract year fro publication dat and rename column
for (i in seq(1,length(song_data1$id),1)){
#print(i)
if(!is.na(song_data1$publicationDate[i])) {
lifeSpan_end= strsplit(song_data1$publicationDate[i], "[-]")[[1]]
year_end=lifeSpan_end[1]
#print(i)
song_data1$publicationDate[i]<-year_end
}
else{
song_data1$publicationDate[i]<-NA}
}
# deleting award , lyrics and genre  columns
song_data1
colSums(is.na(song_data1))
# song per album]
song_data1 %>%
group_by(id_album) %>%
summarise(count_song = n_distinct("id"))
n_distinct(song_data1$id)
song_data1 <- rename(song_data1, "id_song" = "id")
song_data1 <- rename(song_data1, "genre_song" = "genre")
song_data1 <- rename(song_data1, "publicationDate_song" = "publicationDate")
song_data1 <- subset(song_data1, select=-availableCountries)
song_data1
album_data1= read.csv("albums_features_sadia.csv")
album_data1
colSums(is.na(album_data1))
# check for missing value in publication and replace it by year in date release
for (i in seq(1,length(album_data1$id_album),1)){
if(!is.na(album_data1$publicationDate[i])) {
year= strsplit(album_data1$publicationDate[i], "[-]")[[1]]
album_data1$publicationDate[i]<-year[1]
}
else{
album_data1$publicationDate[i]<-album_data1$publicationDate[i]
}
}
#album_data1
colSums(is.na(album_data1))
album_data1
album_data1 <- rename(album_data1, "publicationDate_album" = "publicationDate")
album_data1 <- rename(album_data1, "genre_album" = "genre")
album_data1 <- rename(album_data1, "deezerFans_album" = "deezerFans")
album_song<- merge(song_data1, album_data1, by = "id_album")
album_song
colSums(is.na(album_song))
album_song<- album_song %>%
filter(country != "") %>% filter(!is.na(country)  & !is.na(publicationDate_song) & !is.na(publicationDate_album) & !is.na(id_song))
album_song$publicationDate<- as.numeric(album_song$publicationDate_song)
album_song$publicationDate<- as.numeric(album_song$publicationDate_album)
library(dplyr)
library(countrycode)
# count number of songs per yer
album_song %>%
group_by(publicationDate_album) %>%
summarize(count_song = n_distinct(id_song))
all_data<- merge(album_song, artist_data1, by = "id_artist")
all_data
colSums(is.na(all_data))
library(countrycode)
all_data$continent <- countrycode(sourcevar = all_data[, "country"],
origin = "country.name", destination = "continent")
table(all_data$continent)
all_data$gender[is.na(all_data$gender)] <- "Unknown"
all_data<- rename(all_data,"year"="publicationDate_album")
global_data1<-all_data %>% group_by(year,gender,country,genre_album,lifeSpan.ended,continent) %>%
summarize(count_song = n_distinct(id_song),
count_album = n_distinct(id_album),
count_artist = n_distinct(id_artist),
deezer_fans=sum(deezerFans_album),
average_availableCountries = mean(count_availablecountry,trim = 1),
average_fans = mean(deezerFans_album,trim = 1))
global_data1$lat <- NA
global_data1$lon <- NA
global_data1$continent <- NA
global_data1<- rename(global_data1,"genre"="genre_album")
global_data1
global_data1<- data.frame(global_data1)
table(global_data1$genre)
rock_list<- list("Rock","Soft Rock","Rap Rock","Pop Rock","Piano Rock","Symphonic Rock","Electronic Rock",
"Progressive Rock","Indie Rock","Industrial Rock","Gothic Rock","Glam Rock","Hard Rock","Deutschrock","Experimental Rock","Folk Rock","Art Rock","J-Rock","Psychedelic Rock","Alternative Rock")
hip_hop_list<- list("Hip Hop","Trip Hop","Southern Hip Hop","Trip Hop",
"Hardcore Hip Hop","Christian Hip Hop","Australian Hip Hop")
pop_list<-list("Pop","Electropop","Synthpop","Psychedelic Pop","Power Pop","Experimental Pop","Pop Punk","Indie Pop","French Pop")
folk_list<- list("Folk","Filk")
punk_list<- list("Steampunk","Post-Punk","Punk Rock","Hardcore Punk","Horror Punk")
metal_list<-list("Black Metal","Glam Metal","Melodic Death Metal","Metalcore","Progressive Metal","Power Metal",
"Folk Metal","Death Metal","Heavy Metal","Gothic Metal","Nu Metal")
for (i in 1:nrow(global_data1)){
if(!is.na(global_data1$genre[i])){
if(global_data1$genre[i] %in% rock_list ){
global_data1$genre[i]<-"Rock"
}
else if (global_data1$genre[i] %in% hip_hop_list ){
global_data1$genre[i]<-"Hip Hop"
}
else if (global_data1$genre[i] %in% pop_list ){
global_data1$genre[i]<-"Pop"
}
else if (global_data1$genre[i] %in% metal_list ){
global_data1$genre[i]<-"Metal"
}
else if (global_data1$genre[i] %in% folk_list ){
global_data1$genre[i]<-"Folk"
}
else if (global_data1$genre[i] == "Jazz"){
global_data1$genre[i]<-"Jazz"
}
else if (global_data1$genre[i] =="Country" ){
global_data1$genre[i]<-"Country"
}
else if (global_data1$genre[i] =="R&amp;B"|global_data1$genre[i] =="Contemporary R&amp;B"){
global_data1$genre[i]<-"R&B"
}
else{
global_data1$genre[i]<-"Others"
}
}
}
table(global_data1$genre)
# Replace String with Another Stirng on a single column
table(global_data1$country)
getwd()
coord_cap <- read.csv(file = "concap.csv")
coord_cap$CapitalLatitude <- as.character(coord_cap$CapitalLatitude)
coord_cap$CapitalLongitude <- as.character(coord_cap$CapitalLongitude)
# get coordinates for each country
for (i in 1:nrow(global_data1)) {
if ((global_data1[i,3] %in% coord_cap$CountryName) == TRUE){
global_data1$lat[i] <- coord_cap[which(coord_cap$CountryName == as.character(global_data1[i,3])),3]
global_data1$lon[i] <- coord_cap[which(coord_cap$CountryName == as.character(global_data1[i,3])),4]
global_data1$continent[i] <- coord_cap[which(coord_cap$CountryName == as.character(global_data1[i,3])),6]
} else {
global_data1$lat[i] <- "Unknown"
global_data1$lon[i] <- "Unknown"
}
}
global_data1$genre[is.na(global_data1$genre)] <- "Unknown"
global_data1$country[is.na(global_data1$country)] <- "Unknown"
colSums(is.na(global_data1))
global_data1
table(global_data1$continent)
# here we can see that  Canada     Guatemala        Mexico United States are considered as central america country lets change that to north america
dd=global_data1%>% filter(continent=="Central America")%>% select(country)
table(dd)
# so
global_data1$continent[global_data1$continent == "Central America"] <- 'North America'
table(global_data1$continent)
dd=global_data1%>% filter(continent=="South America")%>% select(country)
table(dd)
write.csv(global_data1,"my_golbal_data_sadia.csv")
write.csv(global_data1,"my_global_data_sadia.csv")
shiny::runApp('myApp')
